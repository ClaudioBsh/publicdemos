version: '3.8'

x-backend:
  &backend
  build: .
  container_name: fief-api
  volumes:
  - ./app:/code/app
  - ./config:/code/config
  - ./app/niceguistorage:/code/.nicegui:rw
  working_dir: /code/app
  environment:
    # Show output live in the console
    PYTHONUNBUFFERED: 1
    PYTHONPATH: "/code"
    PUID: ${UID}
    PGID: ${GID}
  depends_on:
    - redis

x-fief:
  &fief-environment
  environment:
  - PUID=${UID}
  - PGID=${GID}
  - SECRET=${SECRET}
  - FIEF_CLIENT_ID=${FIEF_CLIENT_ID}
  - FIEF_CLIENT_SECRET=${FIEF_CLIENT_SECRET}
  - ENCRYPTION_KEY=${ENCRYPTION_KEY}
  - PORT=${PORT}
  - ROOT_DOMAIN=${ROOT_DOMAIN}
  - FIEF_DOMAIN=${FIEF_DOMAIN}
  - FIEF_SERVER_URL=${FIEF_SERVER_URL}
  - FIEF_MAIN_USER_EMAIL=${FIEF_MAIN_USER_EMAIL}
  - FIEF_MAIN_USER_PASSWORD=${FIEF_MAIN_USER_PASSWORD}
  - DATABASE_TYPE=${DATABASE_TYPE}
  - DATABASE_HOST=${DATABASE_HOST}
  - DATABASE_PORT=${DATABASE_PORT}
  - DATABASE_USERNAME=${DATABASE_USERNAME}
  - DATABASE_PASSWORD=${DATABASE_PASSWORD}
  - DATABASE_NAME=${DATABASE_NAME}
  - REDIS_URL=${REDIS_URL}
  - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE}
  - SESSION_DATA_COOKIE_SECURE=${SESSION_DATA_COOKIE_SECURE}
  - USER_LOCALE_COOKIE_SECURE=${USER_LOCALE_COOKIE_SECURE}
  - LOGIN_SESSION_COOKIE_SECURE=${LOGIN_SESSION_COOKIE_SECURE}
  - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE}
  - LOGIN_HINT_COOKIE_SECURE=${LOGIN_HINT_COOKIE_SECURE}
  - REGISTRATION_SESSION_COOKIE_SECURE=${REGISTRATION_SESSION_COOKIE_SECURE}
  - FORWARD_ALLOWED_IPS=${FORWARD_ALLOWED_IPS}
  - TELEMETRY_ENABLED=${TELEMETRY_ENABLED}
  - FIEF_API_KEY=${FIEF_API_KEY}
  - FIEF_MAIN_ADMIN_API_KEY=${FIEF_MAIN_ADMIN_API_KEY}
  - FIEF_ADMIN_SESSION_COOKIE_SECURE=${FIEF_ADMIN_SESSION_COOKIE_SECURE}
  - DATABASE_SSL_MODE=${DATABASE_SSL_MODE}
  - UVICORN_SSL_KEYFILE=${UVICORN_SSL_KEYFILE}
  - UVICORN_SSL_CERTFILE=${UVICORN_SSL_CERTFILE}
  - CLIENT_REDIRECT_URI_SSL_REQUIRED=${CLIENT_REDIRECT_URI_SSL_REQUIRED}
  - CSRF_CHECK_ENABLED=${CSRF_CHECK_ENABLED}
  - LOG_LEVEL
#  volumes:
#  - ./data/fief:/data
#  extra_hosts:
#  - "fiefdemo.localhost:host-gateway"
  depends_on:
  - redis

services:

  traefik:
    image: traefik:v2.10.1
    container_name: fief-traefik
    environment:
    - CF_API_EMAIL={{ tls_email }}
    - CF_API_KEY={{ tls_key }}
    - CF_DNS_API_TOKEN={{ tls_dns_token }}
    command:
    - "--api.dashboard=true"
    - "--log.level=INFO"
{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
    - "--api.insecure=false"
{% else %}
    - "--api.insecure=true"
{% endif %}
    - "--providers.docker=true"
    - "--providers.docker.exposedbydefault=false"
#    - "--entrypoints.web.address=:80"
{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
    - "--entrypoints.websecure.address=:443"
    - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
    - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
    - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
#    - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
    - "--certificatesresolvers.letsencrypt.acme.email={{ tls_email }}"
    - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
{% endif %}
    ports:
{% if fiefdemo_use_ip_port == true %}
    - 8080:8080  # For Traefik Dashboard
{% else %}
#    - 80:80
    - 443:443
{% endif %}
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
    - ./data/letsencrypt:/letsencrypt
    labels:
    - traefik.enable=true
    - traefik.http.routers.traefik.entrypoints=websecure
    - traefik.http.routers.traefik.tls=true
#    - traefik.http.routers.traefik.rule=Host(`{{ fiefdemo_domain }}`) && PathPrefix(`/traefikdashboard`)
    - traefik.http.routers.traefik.service=api@internal
    - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
    - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
#    - traefik.http.services.traefik.loadbalancer.server.port=80
    - traefik.http.services.traefik.loadbalancer.server.port=443
    - traefik.http.services.traefik.loadbalancer.passhostheader=true
{% endif %}
    depends_on:
    - fief

  api:
    <<: *backend
# Use command: only if you want to overwrite the default Dockerfile CMD!
#    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    # HERE - Make external access possible (e.g. from Browser) => https://medium.com/@TimvanBaarsen/how-to-connect-to-the-docker-host-from-inside-a-docker-container-112b4c71bc66
#    extra_hosts:
#    - "fiefdemo.localhost:host-gateway"
    labels:
    - "traefik.enable=true"
{% if fiefdemo_use_ip_port == true %}
    - "traefik.http.routers.api.rule=Host(`{{ fiefdemo_ip }}`)"
{% else %}
 #   - "traefik.http.routers.api-nsec.rule=Host(`api.{{ fiefdemo_domain }}`)"
    - "traefik.http.routers.api.rule=Host(`api.{{ fiefdemo_domain }}`)"
{% endif %}
{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
#    - "traefik.http.routers.api-nsec.entrypoints=web"
    - "traefik.http.routers.api.entrypoints=websecure"
    - "traefik.http.routers.api.tls=true"
    - "traefik.http.routers.api.tls.certresolver=letsencrypt"
{% else %}
    - "traefik.http.routers.api.entrypoints=web"
{% endif %}
    - "traefik.http.services.api.loadbalancer.server.port=8001"
{% if fiefdemo_use_ip_port == true %}
    ports:
    - 8001:8001
{% else %}
    expose:
    - 8001
{% endif %}

  db:
    container_name: fief-db
    image: postgres:16.1-alpine
    ports:
    - 5432:5432
    environment:
      PGUSER: ${DATABASE_USERNAME}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
    - ./scripts/init_db.sh:/init_db.sh
    - fief-postgres-data:/var/lib/postgresql/data

  redis:
    container_name: fief-redis
    image: redis:alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
    - fief-redis-data:/data

  fief:
    <<: *fief-environment
    container_name: fief-server
#    image: ghcr.io/fief-dev/fief:0.27.0
    image: ghcr.io/fief-dev/fief:0.28.5
#    command: fief run-server --port 8000
    command: fief run-server
# FIEF workaround
#    labels:
#    - "traefik.enable=true"
#{% if fiefdemo_use_ip_port == true %}
#    - "traefik.http.routers.fief.rule=Host(`{{ fiefdemo_ip }}`)"
#{% else %}
#    - "traefik.http.routers.fief-nsec.rule=Host(`fiefdemo.{{ fiefdemo_domain }}`)"
#    - "traefik.http.routers.fief.rule=Host(`fiefdemo.{{ fiefdemo_domain }}`)"
#{% endif %}
#{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
#    - "traefik.http.routers.fief-nsec.entrypoints=web"
#    - "traefik.http.routers.fief.entrypoints=websecure"
#    - "traefik.http.routers.fief.tls=true"
#    - "traefik.http.routers.fief.tls.certresolver=letsencrypt"
#{% else %}
#    - "traefik.http.routers.fief.entrypoints=web"
#{% endif %}
#    - "traefik.http.routers.fief.service=fief"
#    - "traefik.http.services.fief.loadbalancer.server.port=8000"
#    - "traefik.http.services.fief.loadbalancer.passhostheader=true"
{% if fiefdemo_use_ip_port == true %}
    ports:
    - 8000:8000
{% else %}
#    expose:
#    - 8000
#    ports:
#    - 8000:8000
# FIEF workaround
    ports:
    - 80:80
{% endif %}

  worker:
    <<: *fief-environment
    container_name: fief-worker
#    image: ghcr.io/fief-dev/fief:0.27.0
    image: ghcr.io/fief-dev/fief:0.28.5
    command: fief run-worker -p 1 -t 1

# Have in mind, that nginx uses Port 80, not 443!!
  web:
    image: nginx:alpine
    container_name: fief-web
    volumes:
    - ./web:/usr/share/nginx/html:ro
{% if fiefdemo_use_ip_port == true %}
    ports:
    - "80:80"
#    - "443:443"
{% else %}
    expose:
    - "80"
#    - "443"
{% endif %}
    labels:
    - "traefik.enable=true"
{% if fiefdemo_use_ip_port == true %}
    - "traefik.http.routers.web.rule=Host(`{{ fiefdemo_ip }}`)"
{% else %}
#    - "traefik.http.routers.web-nsec.rule=Host(`{{ fiefdemo_domain }}`)"
    - "traefik.http.routers.web.rule=Host(`{{ fiefdemo_domain }}`)"
{% endif %}
{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
#    - "traefik.http.routers.web-nsec.entrypoints=web"
#    - "traefik.http.routers.web-nsec.middlewares=redirect-to-https"
    - "traefik.http.routers.web.entrypoints=websecure"
    - "traefik.http.routers.web.tls=true"
    - "traefik.http.routers.web.tls.certresolver=letsencrypt"
{% else %}
    - "traefik.http.routers.web.entrypoints=web"
{% endif %}
    - "traefik.http.services.web.loadbalancer.server.port=80"
#    - "traefik.http.services.web.loadbalancer.server.port=443"
    depends_on:
    - traefik

{% if use_dozzle == true %}
  dozzle:
    image: amir20/dozzle:latest
    container_name: fief-dozzle
#    environment:
#      DOZZLE_AUTH_PROVIDER: forward-proxy
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
{% if fiefdemo_use_ip_port == true %}
    ports:
    - "8081:8080"
{% else %}
#    expose:
#    - "8080"
    ports:
    - "8081:8080"
{% endif %}
    labels:
    - "traefik.enable=true"
{% if fiefdemo_use_ip_port == true %}
#    - "traefik.http.routers.dozzle.rule=Host(`{{ fiefdemo_ip }}`) && PathPrefix(`/dozzle`)"
    - "traefik.http.routers.dozzle.rule=Host(`dozzle.{{ fiefdemo_ip }}`)"
{% else %}
#    - "traefik.http.routers.dozzle-nsec.rule=Host(`{{ fiefdemo_domain }}`) && PathPrefix(`/dozzle`)"
#    - "traefik.http.routers.dozzle.rule=Host(`{{ fiefdemo_domain }}`) && PathPrefix(`/dozzle`)"
#    - "traefik.http.routers.dozzle-nsec.rule=Host(`dozzle.{{ fiefdemo_domain }}`)"
    - "traefik.http.routers.dozzle.rule=Host(`dozzle.{{ fiefdemo_domain }}`)"
{% endif %}
{% if fiefdemo_use_ip_port != true and fiefdemo_domain != 'localhost' %}
#    - "traefik.http.routers.dozzle-nsec.entrypoints=web"
#    - "traefik.http.routers.dozzle-nsec.middlewares=redirect-to-https"
    - "traefik.http.routers.dozzle.entrypoints=websecure"
    - "traefik.http.routers.dozzle.tls=true"
    - "traefik.http.routers.dozzle.tls.certresolver=letsencrypt"
{% else %}
    - "traefik.http.routers.dozzle.entrypoints=web"
{% endif %}
    - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
    - "traefik.http.services.dozzle.loadbalancer.passhostheader=true"
    - "traefik.http.routers.dozzle.service=dozzle"
    depends_on:
    - traefik
{% endif %}

volumes:
  fief-redis-data:
  fief-postgres-data:
